# Blueprint Metadata
blueprint:
  name: Controller - Philips 929003017102 Hue wall switch module
  description: |
    # Controller - Philips 929003017102 Hue wall switch module

    Controller automation for executing any kind of action triggered by the provided Philips 929003017102 Hue wall switch module.
    Allows to optionally loop an action on a button long press.
    The blueprint also adds support for virtual double button press events, which are not exposed by the controller device itself. However, It needs to be enabled in the blueprint.
    Supports Zigbee2MQTT.

    Automations created with this blueprint can be connected with one or more [Hooks](https://yarafie.github.io/awesome-ha-blueprints/docs/blueprints/hooks) supported by this controller.
    Hooks allow to easily create controller-based automations for interacting with lights, covers, media players, and potentially more.
    See the list of [Hooks available for this controller](https://yarafie.github.io/awesome-ha-blueprints/docs/blueprints/controllers/philips_929003017102#available-hooks) for additional details.

    A small note, avoid using both custom actions and Hooks in the same blueprint, otherwise strange things may occur.

    ## More Info

    ℹ️ Version 2025.10.23
    📝 [Changelog](https://yarafie.github.io/awesome-ha-blueprints/docs/blueprints/controllers/philips_929003017102/#changelog)
    📕 Full documentation regarding this blueprint is available [here](https://yarafie.github.io/awesome-ha-blueprints/docs/blueprints/controllers/philips_929003017102).

    🚀 This blueprint is part of the **[Awesome HA Blueprints](https://yarafie.github.io/awesome-ha-blueprints) project**. Please consider **[leaving a star on GitHub](https://github.com/EPMatt/awesome-ha-blueprints)**! 🌟

  source_url: https://github.com/yarafie/HA-BluePrints/blob/main/Testing/philips_929003017102.yaml
  domain: automation
  homeassistant:
    min_version: 2024.10.0
  # Device Selector
  input:
    controller_device:
      name: (Zigbee2MQTT, ZHA Required) Controller Device
      description: The controller device to use for the automation. Choose a value only if the remote is integrated with deCONZ, ZHA, Zigbee2MQTT.
      default: ''
      selector:
        # source: https://zigbee.blakadder.com/Philips_RDM001.html
        device:
          filter:
            # source: https://www.zigbee2mqtt.io/devices/929003017102.html#philips-929003017102
            - integration: mqtt
              manufacturer: Philips
              model: Hue wall switch module
            # For backwards compatibility with z2m 1.x. model_id is added to end of model rather than a seperate attribute in z2m 2.x
            - integration: mqtt
              manufacturer: Philips
              model: Hue wall switch module (929003017102)
          multiple: false
    # inputs for custom actions
    action_switch_left_short:
      name: (Optional) Left switch short press
      description: Action to run on short on button press.
      default: []
      selector:
        action:
    action_switch_left_long:
      name: (Optional) Left switch long press
      description: Action to run on long on button press.
      default: []
      selector:
        action:
    action_switch_left_release:
      name: (Optional) Left switch release
      description: Action to run on on button release after long press.
      default: []
      selector:
        action:
    action_switch_right_short:
      name: (Optional) Right switch short press
      description: Action to run on short off button press.
      default: []
      selector:
        action:
    action_switch_right_long:
      name: (Optional) Right switch long press
      description: Action to run on long off button press.
      default: []
      selector:
        action:
    action_switch_right_release:
      name: (Optional) Right switch release
      description: Action to run on off button release after long press.
      default: []
      selector:
        action:
    ## inputs switch mode selection
    module_mode_options_section:
      name: Module Mode options
      icon: mdi:remote
      collapsed: false
      input:
        module_mode_option:
          name: (Optional) The mode the module operates
          description: The mode the module to set to
          default: single_rocker
          selector:
            select:
              options:
                - label: Single Rocker
                  value: single_rocker
                - label: Single Push Button
                  value: single_push_button
                - label: Dual Rocker
                  value: dual_rocker
                - label: Dual Push Button
                  value: dual_push_button
              mode: dropdown
    # inputs for looping custom actions on long button press events until the corresponding release event is received
    long_press_options_section:
      name: Long Press options
      icon: mdi:remote
      collapsed: true
      input:
        switch_left_long_loop:
          name: (Optional) Left switch long press - loop until release
          description: Loop the on button action until the button is released.
          default: false
          selector:
            boolean:
        switch_left_long_max_loop_repeats:
          name: (Optional) Left switch long press - Maximum loop repeats
          description: >-
            Maximum number of repeats for the custom action, when looping is enabled.
            Use it as a safety limit to prevent an endless loop in case the corresponding stop event is not received.
          default: 20
          selector:
            number:
              min: 1.0
              max: 1000.0
              mode: slider
              step: 1.0
        switch_right_long_loop:
          name: (Optional) Right switch long press - loop until release
          description: Loop the off button action until the button is released.
          default: false
          selector:
            boolean:
        switch_right_long_max_loop_repeats:
          name: (Optional) Right switch long press - Maximum loop repeats
          description: >-
            Maximum number of repeats for the custom action, when looping is enabled.
            Use it as a safety limit to prevent an endless loop in case the corresponding stop event is not received.
          default: 20
          selector:
            number:
              min: 1.0
              max: 1000.0
              mode: slider
              step: 1.0
        helper_long_press_delay:
          name: (Optional) Helper - Long Press delay
          description: Max delay between the pushing and releasing of a button long press event. Increase this value if you notice that the long press action is not triggered properly.
          default: 250
          selector:
            number:
              min: 100.0
              max: 5000.0
              unit_of_measurement: milliseconds
              mode: box
              step: 10.0
#
# Automation schema
variables:
  # Controller ID
  controller_id: !input controller_device
  module_mode_option: !input module_mode_option
  # integration id used to select items in the action mapping
  # integration type is set from trigger.id
  integration_id: '{{ trigger.id.split("-")[0] }}'
  # convert input tags to variables, to be used in templates
  switch_left_long_loop: !input switch_left_long_loop
  switch_left_long_max_loop_repeats: !input switch_left_long_max_loop_repeats
  switch_right_long_loop: !input switch_right_long_loop
  switch_right_long_max_loop_repeats: !input switch_right_long_max_loop_repeats
  helper_long_press_delay: !input helper_long_press_delay
  # mapping between actions and integrations
  actions_mapping:
    z2m:
      # source: https://www.zigbee2mqtt.io/devices/929003017102.html#philips-929003017102
      switch_left_short: [left_press_release, toggle]
      switch_left_long: [left_hold]
      switch_left_release: [left_hold_release]
      switch_right_short: [right_press_release]
      switch_right_long: [right_hold]
      switch_right_release: [right_hold_release]
  # pre-choose actions for buttons based on configured integration
  # mainly used to pass to hooks through ahb_controller_event
  switch_left_short: '{{ actions_mapping[integration_id]["switch_left_short"] }}'
  switch_left_long: '{{ actions_mapping[integration_id]["switch_left_long"] }}'
  switch_left_release: '{{ actions_mapping[integration_id]["switch_left_release"] }}'
  switch_right_short: '{{ actions_mapping[integration_id]["switch_right_short"] }}'
  switch_right_long: '{{ actions_mapping[integration_id]["switch_right_long"] }}'
  switch_right_release: '{{ actions_mapping[integration_id]["switch_right_release"] }}'
#
# Mode Block
mode: single
max_exceeded: silent
#
# Triggers Block
triggers:
  # triggers for zigbee2mqtt
  - trigger: device
    id: z2m-switch-left-short
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: left_press_release
  - trigger: device
    id: z2m-switch-left-short
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: toggle
  - trigger: device
    id: z2m-switch-left-long
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: left_hold
  - trigger: device
    id: z2m-switch-left-release
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: left_hold_release
  - trigger: device
    id: z2m-switch-right-short
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: right_press_release
  - trigger: device
    id: z2m-switch-right-long
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: right_hold
  - trigger: device
    id: z2m-switch-right-release
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: right_hold_release
# Conditions Block
conditions:
  - condition: and
    conditions:
      # check that the button event is not empty
      - >-
        {%- set trigger_action -%}
        {%- if integration_id == "z2m" -%}
        {{ trigger.payload }}
        {%- endif -%}
        {%- endset -%}
        {{ trigger_action not in ["","None","unknown"] }}
#
# Actions Block
actions:
  # Set the module to the selected mode 
  - action: mqtt.publish
    data:
      topic: zigbee2mqtt/{{ device_attr(controller_id, 'name') }}/set
      payload: '{"device_mode":" {{ module_mode_option }}}'
  #
  # choose the sequence to run based on the received trigger
  - choose:
      #
      # Actions for Switch Left Single Press
      - conditions:
          - condition: trigger
            id:
              - z2m-switch-left-short
        sequence:
              # fire the ahb hook event
              - event: ahb_controller_event
                event_data:
                  controller: '{{ controller_id }}'
                  action: switch_left_short
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_switch_left_short
      #
      # Actions for Switch Left Long Press
      - conditions:
          - condition: trigger
            id:
              - z2m-switch-left-long
        sequence:
          # fire the ahb event only once, the ahb hook will take care of looping
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: switch_left_long
          # run the custom action only once before entering repeat
          - choose:
              - conditions: []
                sequence: !input action_switch_left_long
          # handle custom action looping if looping is enabled
          - choose:
              - conditions: '{{ switch_left_long_loop }}'
                sequence:
                  - repeat:
                      count: !input switch_left_long_max_loop_repeats
                      sequence:
                        - parallel:
                            - sequence: !input action_switch_left_long
                            - sequence:
                                - choose:
                                    - conditions: []
                                      sequence:
                                        - wait_for_trigger:
                                            # z2m triggers
                                            - trigger: device
                                              domain: mqtt
                                              device_id: !input controller_device
                                              type: action
                                              subtype: left_hold_release
                                          timeout:
                                            milliseconds: !input helper_long_press_delay
                                          continue_on_timeout: true
                                        - if:
                                            - condition: template
                                              value_template: '{{ wait.trigger.idx is defined }}'
                                          then:
                                            - stop: left switch released
      #
      # Actions for Switch Left long press released
      - conditions:
          - condition: trigger
            id:
              - z2m-switch-left-release
        sequence:
          # fire the ahb hook event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: switch_left_release
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_switch_left_release
      #
      # Actions for Switch Right Single Press
      - conditions:
          - condition: trigger
            id:
              - z2m-switch-right-short
        sequence:
              # fire the ahb hook event
              - event: ahb_controller_event
                event_data:
                  controller: '{{ controller_id }}'
                  action: switch_right_short
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_switch_right_short
      #
      # Actions for Switch Right Long Press
      - conditions:
          - condition: trigger
            id:
              - z2m-switch-right-long
        sequence:
          # fire the ahb event only once, the ahb hook will take care of looping
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: switch_right_long
          # run the custom action only once before entering repeat
          - choose:
              - conditions: []
                sequence: !input action_switch_right_long
          # handle custom action looping if looping is enabled
          - choose:
              - conditions: '{{ switch_right_long_loop }}'
                sequence:
                  - repeat:
                      count: !input switch_right_long_max_loop_repeats
                      sequence:
                        - parallel:
                            - sequence: !input action_switch_right_long
                            - sequence:
                                - choose:
                                    - conditions: []
                                      sequence:
                                        - wait_for_trigger:
                                            # z2m triggers
                                            - trigger: device
                                              domain: mqtt
                                              device_id: !input controller_device
                                              type: action
                                              subtype: right_hold_release
                                          timeout:
                                            milliseconds: !input helper_long_press_delay
                                          continue_on_timeout: true
                                        - if:
                                            - condition: template
                                              value_template: '{{ wait.trigger.idx is defined }}'
                                          then:
                                            - stop: right switch released
      #
      # Actions for Switch Right long press released
      - conditions:
          - condition: trigger
            id:
              - z2m-switch-right-release
        sequence:
          # fire the ahb hook event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: switch_right_release
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_switch_right_release
